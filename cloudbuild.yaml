steps:
  # Step 1: Build the project using Maven
  - name: 'maven:3.8.1-jdk-8'
    entrypoint: 'mvn'
    args: ['clean', 'package', '-DskipTests=false']

  # Step 2: Build Docker image with a custom tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-app:latest', '.']

  # Step 3: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/my-app:latest']

  # Step 4: Clone the repository with deployment YAML files
  - name: 'gcr.io/cloud-builders/git'
    args:
      - 'clone'
      - '--branch'
      - 'master'
      - '--single-branch'
      - 'https://github.com/yogeshshah95/deployment.git'
      - '/workspace/deployment-files'

  # Step 5: Authenticate and configure Kubernetes cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'x2'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-f'
      - 'CLOUDSDK_CONTAINER_CLUSTER=x2'

  # Step 6: Delete existing deployment (if it exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['delete', '-f', '/workspace/deployment-files/deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-f'
      - 'CLOUDSDK_CONTAINER_CLUSTER=x2'
    ignoreExitStatus: true  # Avoid failing if deployment doesn't exist

  # Step 7: Pause before creating new deployment (Sleep for 10 seconds)
  - name: 'ubuntu'
    entrypoint: 'bash'
    args: ['-c', 'sleep 60']

  # Step 8: Create a new deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['create', '-f', '/workspace/deployment-files/deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-f'
      - 'CLOUDSDK_CONTAINER_CLUSTER=x2'

images:
  - 'gcr.io/$PROJECT_ID/my-app:latest'