steps:
  # Step 1: Build the project using Maven
  - name: 'maven:3.8.1-jdk-8'
    entrypoint: 'mvn'
    args: ['clean', 'package', '-DskipTests=false']

  # Step 2: Build Docker image with a custom tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-app:latest', '.']  # Directly specify 'latest' tag

  # Step 3: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/my-app:latest']  # Push the image tagged with 'latest'

  # Step 3: Clone the repository with deployment YAML files
  - name: 'gcr.io/cloud-builders/git'
    args:
      - 'clone'
      - 'https://github.com/yogeshshah95/deployment.git'  # Replace with the repository URL
      - '/workspace/deployment-files'                     # Target directory for cloning

  # Step 4: Authenticate and configure Kubernetes cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'x2'  # Replace with your cluster name
    env:
      #- 'CLOUDSDK_COMPUTE_REGION=us-central1'    # Set cluster region
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-f'    # Set cluster zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=x2'          # Set cluster name

  # Step 5: Deploy to Kubernetes using kubectl
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', '/workspace/deployment-files/deployment.yaml']
    env:
      #- 'CLOUDSDK_COMPUTE_REGION=us-central1'    # Set cluster region
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-f'    # Set cluster zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=x2'          # Set cluster name

# Define the image output (this will be uploaded to GCR)
images:
  - 'gcr.io/$PROJECT_ID/my-app:latest'